//** Constructor Parameters */
export const params = {
    // Animation
    animationAction: ['mixer', 'clip', 'localRoot'],
    animationClip: ['name', 'duration', 'tracks'],
    animationMixer: ['rootObject '],
    animationObjectGroup: ['...args'],
    // animationUtils: [],
    keyframeTrack: ['name', 'times', 'values', 'interpolation'],
    propertyBinding: ['rootNode', 'path', 'parsedPath'],
    propertyMixer: ['binding', 'typeName', 'valueSize'],
    // Animation / Tracks
    booleanKeyframeTrack: ['name', 'times', 'values'],
    colorKeyframeTrack: ['name', 'times', 'values'],
    numberKeyframeTrack: ['name', 'times', 'values'],
    quaternionKeyframeTrack: ['name', 'times', 'values'],
    stringKeyframeTrack: ['name', 'times', 'values'],
    vectorKeyframeTrack: ['name', 'times', 'values'],
    // Audio
    audio: ['listener'],
    audioAnalyser: ['audio', 'fftSize'],
    // audioContext: [],
    audioListener: [],
    positionalAudio: ['listener'],
    // Cameras
    arrayCamera: ['array'],
    camera: [],
    cubeCamera: ['near', 'far', 'renderTarget'],
    orthographicCamera: ['left', 'right', 'top', 'bottom', 'near', 'far'],
    perspectiveCamera: ['fov', 'aspect', 'near', 'far'],
    stereoCamera: [],
    // Constants
    // Core
    bufferAttribute: ['array', 'itemSize', 'normalized'],
    bufferGeometry: [],
    clock: ['autoStart'],
    eventDispatcher: [],
    glBufferAttribute: ['buffer', 'type', 'itemSize', 'elementSize', 'count'],
    instancedBufferAttribute: ['array', 'itemSize', 'normalized', 'meshPerAttribute'],
    instancedBufferGeometry: [],
    instancedInterleavedBuffer: ['array', 'itemSize', 'meshPerAttribute'],
    interleavedBuffer: ['array', 'stride'],
    interleavedBufferAttribute: ['interleavedBuffer', 'itemSize', 'offset', 'normalized'],
    layers: [],
    object3D: [],
    raycaster: ['origin', 'direction', 'near', 'far'],
    uniform: ['value'],
    // Core / BufferAttributes
    // BufferAttribute Types

    // Extras
    curve: [] as any,
    curvePath: [] as any,
    // interpolations: [], functions
    path: ['points'],
    shape: ['points'],
    shapePath: [] as any,

    // Extras / Curves
    arcCurve: ['aX', 'aY', 'xRadius', 'yRadius', 'aStartAngle', 'aEndAngle', 'aClockwise', 'aRotation'],
    catmullRomCurve3: ['points', 'closed', 'curveType', 'tension'],
    cubicBezierCurve: ['v0', 'v1', 'v2', 'v3'],
    cubicBezierCurve3: ['v0', 'v1', 'v2', 'v3'],
    ellipseCurve: ['aX', 'aY', 'xRadius', 'yRadius', 'aStartAngle', 'aEndAngle', 'aClockwise', 'aRotation'],
    lineCurve: ['v1', 'v2'],
    lineCurve3: ['v1', 'v2'],
    quadraticBezierCurve: ['v0', 'v1', 'v2'],
    quadraticBezierCurve3: ['v0', 'v1', 'v2'],
    splineCurve: ['points'],

    // Geometries
    boxGeometry: ['width', 'height', 'depth', 'widthSegments', 'heightSegments', 'depthSegments'],
    capsuleGeometry: ['radius', 'length', 'capSegments', 'radialSegments'],
    circleGeometry: ['radius', 'segments', 'thetaStart', 'thetaLength'],
    coneGeometry: ['radius', 'height', 'radialSegments', 'heightSegments', 'openEnded', 'thetaStart', 'thetaLength'],
    cylinderGeometry: ['radiusTop', 'radiusBottom', 'height', 'radialSegments', 'heightSegments', 'openEnded', 'thetaStart', 'thetaLength'],
    dodecahedronGeometry: ['radius', 'detail'],
    edgesGeometry: ['geometry', 'thresholdAngle'],
    extrudeGeometry: ['shapes', 'options'],
    icosahedronGeometry: ['radius', 'detail'],
    latheGeometry: ['points', 'segments', 'phiStart', 'phiLength'],
    octahedronGeometry: ['radius', 'detail'],
    planeGeometry: ['width', 'height', 'widthSegments', 'heightSegments'],
    polyhedronGeometry: ['vertices', 'indices', 'radius', 'detail'],
    ringGeometry: ['innerRadius', 'outerRadius', 'thetaSegments', 'phiSegments', 'thetaStart', 'thetaLength'],
    shapeGeometry: ['shapes', 'curveSegments'],
    sphereGeometry: ['radius', 'widthSegments', 'heightSegments', 'phiStart', 'phiLength', 'thetaStart', 'thetaLength'],
    tetrahedronGeometry: ['radius', 'detail'],
    torusGeometry: ['radius', 'tube', 'radialSegments', 'tubularSegments', 'arc'],
    torusKnotGeometry: ['radius', 'tube', 'tubularSegments', 'radialSegments', 'p', 'q'],
    tubeGeometry: ['path', 'tubularSegments', 'radius', 'radialSegments', 'closed'],
    wireframeGeometry: ['geometry'],

    // Helpers
    arrowHelper: ['dir', 'origin', 'length', 'hex', 'headLength', 'headWidth'],
    axesHelper: ['size'],
    boxHelper: ['object', 'color'],
    box3Helper: ['box', 'color'],
    cameraHelper: ['camera'],
    directionalLightHelper: ['light', 'size', 'color'],
    gridHelper: ['size', 'divisions', 'colorCenterLine', 'colorGrid'],
    polarGridHelper: ['radius', 'sectors', 'rings', 'divisions', 'color1', 'color2'],
    hemisphereLightHelper: ['light', 'sphereSize', 'color'],
    planeHelper: ['plane', 'size', 'hex'],
    pointLightHelper: ['light', 'sphereSize', 'color'],
    skeletonHelper: ['object'],
    spotLightHelper: ['light', 'color'],
    // Lights
    ambientLight: ['color', 'intensity'],
    directionalLight: ['color', 'intensity'],
    hemisphereLight: ['skyColor', 'groundColor', 'intensity'],
    light: ['color', 'intensity'],
    lightProbe: ['sh', 'intensity'],
    pointLight: ['color', 'intensity', 'distance', 'decay'],
    rectAreaLight: ['color', 'intensity', 'width', 'height'],
    spotLight: ['color', 'intensity', 'distance', 'angle', 'penumbra', 'decay'],

    // Lights / Shadows
    lightShadow: ['camera'],
    pointLightShadow: [],
    directionalLightShadow: [],
    spotLightShadow: [],
    // Loaders
    animationLoader: ['manager'],
    audioLoader: ['manager'],
    bufferGeometryLoader: ['manager'],
    // cache: ['manager'],
    compressedTextureLoader: ['manager'],
    cubeTextureLoader: ['manager'],
    dataTextureLoader: ['manager'],
    fileLoader: ['manager'],
    imageBitmapLoader: ['manager'],
    imageLoader: ['manager'],
    loader: ['manager'],
    // loaderUtils: ['manager'],
    materialLoader: ['manager'],
    objectLoader: ['manager'],
    textureLoader: ['manager'],

    // Loaders / Managers
    // defaultLoadingManager: [],
    loadingManager: ['onLoad', 'onProgress', 'onError'],

    // Materials
    lineBasicMaterial: ['parameters'],
    lineDashedMaterial: ['parameters'],
    material: [],
    meshBasicMaterial: ['parameters'],
    meshDepthMaterial: ['parameters'],
    meshDistanceMaterial: ['parameters'],
    meshLambertMaterial: ['parameters'],
    meshMatcapMaterial: ['parameters'],
    meshNormalMaterial: ['parameters'],
    meshPhongMaterial: ['parameters'],
    meshPhysicalMaterial: ['parameters'],
    meshStandardMaterial: ['parameters'],
    meshToonMaterial: ['parameters'],
    pointsMaterial: ['parameters'],
    rawShaderMaterial: ['parameters'],
    shaderMaterial: ['parameters'],
    shadowMaterial: ['parameters'],
    spriteMaterial: ['parameters'],

    // Math
    box2: ['min', 'max'],
    box3: ['min', 'max'],
    color: ['r', 'g', 'b'],
    cylindrical: ['radius', 'theta', 'y'],
    euler: ['x', 'y', 'z', 'order'],
    frustum: ['p0', 'p1', 'p2', 'p3', 'p4', 'p5'],
    interpolant: ['parameterPositions', 'sampleValues', 'sampleSize', 'resultBuffer'],
    line3: ['start', 'end'],
    // mathUtils: [],
    matrix3: ['n11', 'n12', 'n13', 'n21', 'n22', 'n23', 'n31', 'n32', 'n33'],
    matrix4: ['n11', 'n12', 'n13', 'n14', 'n21', 'n22', 'n23', 'n24', 'n31', 'n32', 'n33', 'n34', 'n41', 'n42', 'n43', 'n44'],
    plane: ['normal', 'constant'],
    quaternion: ['x', 'y', 'z', 'w'],
    ray: ['origin', 'direction'],
    sphere: ['center', 'radius'],
    spherical: ['radius', 'phi', 'theta'],
    sphericalHarmonics3: [],
    triangle: ['a', 'b', 'c'],
    vector2: ['x', 'y'],
    vector3: ['x', 'y', 'z'],
    vector4: ['x', 'y', 'z', 'w'],
    // Math / Interpolants
    cubicInterpolant: ['parameterPositions', 'sampleValues', 'sampleSize', 'resultBuffer'],
    discreteInterpolant: ['parameterPositions', 'sampleValues', 'sampleSize', 'resultBuffer'],
    linearInterpolant: ['parameterPositions', 'sampleValues', 'sampleSize', 'resultBuffer'],
    quaternionLinearInterpolant: ['parameterPositions', 'sampleValues', 'sampleSize', 'resultBuffer'],

    // Objects
    batchedMesh: ['maxGeometryCount', 'maxVertexCount', 'maxIndexCount', 'material'],
    bone: [],
    group: [],
    instancedMesh: ['geometry', 'material', 'count'],
    line: ['geometry', 'material'],
    lineLoop: ['geometry', 'material'],
    lineSegments: ['geometry', 'material'],
    lod: [],
    mesh: ['geometry', 'material'],
    points: ['geometry', 'material'],
    skeleton: ['bones', 'boneInverses'],
    skinnedMesh: ['geometry', 'material'],
    sprite: ['material'],

    // Renderers
    webGLRenderer: ['parameters'],
    webGLRenderTarget: ['width', 'height', 'options'],
    webGL3DRenderTarget: ['width', 'height', 'depth', 'options'],
    webGLArrayRenderTarget: ['width', 'height', 'depth', 'options'],
    webGLCubeRenderTarget: ['size', 'options'],

    // Renderers / Shaders
    shaderChunk: [],
    shaderLib: [],
    uniformsLib: [],
    uniformsUtils: [],

    // Renderers / WebXR
    webXRManager: [],

    // Scenes
    fog: ['color', 'near', 'far'],
    fogExp2: ['color', 'density'],
    scene: [],

    // Textures
    canvasTexture: ['canvas', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy'],
    compressedTexture: ['mipmaps', 'width', 'height', 'format', 'type', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'anisotropy', 'colorSpace'],
    compressedArrayTexture: ['mipmaps', 'width', 'height', 'format', 'type'],
    cubeTexture: ['images', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy', 'colorSpace'],
    data3DTexture: ['data', 'width', 'height', 'depth'],
    dataArrayTexture: ['data', 'width', 'height', 'depth'],
    dataTexture: ['data', 'width', 'height', 'format', 'type', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'anisotropy', 'colorSpace'],
    depthTexture: ['width', 'height', 'type', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'anisotropy', 'format'],
    framebufferTexture: ['width', 'height'],
    source: ['data'],
    texture: ['image', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy', 'colorSpace'],
    videoTexture: ['video', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy'],
    // Addons
    // Animations
    ccdIKSolver: ['mesh', 'iks'],
    mmdAnimationHelper: ['params'],
    mmdPhysics: ['mesh', 'rigidBodyParams', 'constraintParams', 'params'],

    // Controls
    arcballControls: ['camera', 'domElement', 'scene'],
    dragControls: ['objects', 'camera', 'domElement'],
    firstPersonControls: ['object', 'domElement'],
    flyControls: ['object', 'domElement'],
    mapControls: ['object', 'domElement'],
    orbitControls: ['object', 'domElement'],
    pointerLockControls: ['object', 'domElement'],
    trackballControls: ['object', 'domElement'],
    transformControls: ['object', 'domElement'],
    // Geometries
    convexGeometry: ['points'],
    decalGeometry: ['mesh', 'position', 'orientation', 'size'],
    parametricGeometry: ['func', 'slices', 'stacks'],
    textGeometry: ['text', 'parameters'],
    sdfGeometryGenerator: ['renderer'],
    // Helpers
    lightProbeHelper: ['lightProbe', 'size'],
    positionalAudioHelper: ['audio', 'range'],
    rectAreaLightHelper: ['light', 'color'],
    vertexNormalsHelper: ['object', 'size', 'color'],
    vertexTangentsHelper: ['object', 'size', 'color'],
    // Lights
    // lightProbeGenerator: [],
    // Loaders
    rhino3dmLoader: ['manager'],
    dracoLoader: ['manager'],
    fontLoader: ['manager'],
    gltfLoader: ['manager'],
    ktx2Loader: ['manager'],
    lDrawLoader: ['manager'],
    lut3dlLoader: ['manager'],
    lutCubeLoader: ['manager'],
    mmdLoader: ['manager'],
    mtlLoader: ['manager'],
    objLoader: ['manager'],
    pcdLoader: ['manager'],
    pdbLoader: ['manager'],
    svgLoader: ['manager'],
    tgaLoader: ['manager'],
    // Objects
    lensflare: ['texture', 'size', 'distance', 'color'],
    // Post - Processing
    effectComposer: ['renderer', 'renderTarget'],

    // Exporters
    dracoExporter: [],
    exrExporter: [],
    gltFExporter: [],
    objExporter: [],
    plyExporter: [],
    stlExporter: [],

    // Math
    lut: ['colormap', 'count'],
    meshSurfaceSampler: ['mesh'],
    obb: ['center', 'halfSize', 'rotation'],

    // Misc
    timer: [],

    // ConvexHull
    face: [],
    halfEdge: ['vertex', 'face'],
    convexHull: [],
    vertexNode: ['point'],
    vertexList: [],

    //Renderers
    css2DRenderer: ['parameters'],
    css3DRenderer: ['parameters'],
    svgRenderer: [],

    //Utils
    // BufferGeometryUtils
    // CameraUtils
    // SceneUtils
    // SkeletonUtils

    // WebXR
    xrEstimatedLight: ['renderer', 'environmentEstimation'],
}

export const paramTypes = {
    orbitControls: ['camera', 'domElement', 'enableDamping'],
    textGeometry: ['str', 'parameters'],
    gltf: ['path'],

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\animation
    animationAction: ['mixer', 'clip', 'localRoot', 'blendMode']
    animationClip: ['name', 'duration', 'tracks', 'blendMode'],
    animationMixer: constructor(root: Object3D | AnimationObjectGroup)
    animationObjectGroup: constructor(...args: any[])
    // AnimationUtilsProps
    keyframeTrack: constructor(name: string, times: ArrayLike<number>, values: ArrayLike<any>, interpolation ?: InterpolationModes)
    propertyBinding: constructor(targetGroup: any, path: any, parsedPath ?: any)
    propertyMixer: constructor(binding: any, typeName: string, valueSize: number)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\animation\track
    vectorKeyframeTrack: constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation ?: InterpolationModes)
    booleanKeyframeTrack: constructor(name: string, times: ArrayLike<number>, values: ArrayLike<any>)
    colorKeyframeTrack: constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation ?: InterpolationModes)
    numberKeyframeTrack: constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation ?: InterpolationModes)
    quaternionKeyframeTrack: constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation ?: InterpolationModes)
    stringKeyframeTrack: constructor(name: string, times: ArrayLike<number>, values: ArrayLike<any>, interpolation ?: InterpolationModes)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\audio
    // audio:AudioProps,
    //@ts-ignore
    audio: constructor(listener: AudioListener)
    audioAnalyser: constructor(audio: Audio<AudioNode>, fftSize ?: number)
    // audioContext:AudioContextProps,
    // `audio` works but conflicts with @types/react. Try using PositionalAudio from @react-three/drei instead
    // audio: AudioProps
    audioListener: [],
    positionalAudio: constructor(listener: AudioListener)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\cameras
    camera: [],
    perspectiveCamera: constructor(fov ?: number, aspect ?: number, near ?: number, far ?: number)
    orthographicCamera: constructor(left ?: number, right ?: number, top ?: number, bottom ?: number, near ?: number, far ?: number)
    cubeCamera: constructor(near: number, far: number, renderTarget: WebGLCubeRenderTarget)
    arrayCamera: constructor(cameras ?: PerspectiveCamera[])
    stereoCamera: [],

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\core
    bufferAttribute: constructor(array: TypedArray, itemSize: number, normalized ?: boolean)
    bufferGeometry: [],
    clock: constructor(autoStart ?: boolean)
    eventDispatcher: [],
    glBufferAttribute: constructor(buffer: WebGLBuffer, type: GLenum, itemSize: number, elementSize: 1 | 2 | 4, count: number)
    instancedBufferAttribute: constructor(array: TypedArray, itemSize: number, normalized ?: boolean, meshPerAttribute ?: number)
    instancedBufferGeometry: [],
    instancedInterleavedBuffer: constructor(array: TypedArray, stride: number, meshPerAttribute ?: number)
    interleavedBuffer: constructor(array: TypedArray, stride: number)
    interleavedBufferAttribute: constructor(interleavedBuffer: InterleavedBuffer, itemSize: number, offset: number, normalized ?: boolean)
    // layers:LayersProps,
    object3D: [],
    raycaster: constructor(origin ?: Vector3, direction ?: Vector3, near ?: number, far ?: number)
    renderTarget: constructor(width ?: number, height ?: number, options ?: RenderTargetOptions)
    uniform: constructor(value: T)
    uniformsGroup: [],

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\extras\core
    // curve:curveProps,
    curvePath: [],
    // interpolations:InterpolationsProps,
    //@ts-ignore
    path: constructor(points ?: Vector2[])
    shape: constructor(points ?: Vector2[])
    shapePath: [],

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\extras\curves
    arcCurve: constructor(aX ?: number, aY ?: number, aRadius ?: number, aStartAngle ?: number, aEndAngle ?: number, aClockwise ?: boolean,);,
    catmullRomCurve3: constructor(points ?: Vector3[], closed ?: boolean, curveType ?: CurveType, tension ?: number)
    cubicBezierCurve: constructor(v0 ?: Vector2, v1 ?: Vector2, v2 ?: Vector2, v3 ?: Vector2)
    cubicBezierCurve3: constructor(v0 ?: Vector3, v1 ?: Vector3, v2 ?: Vector3, v3 ?: Vector3)
    ellipseCurve: constructor(aX ?: number, aY ?: number, xRadius ?: number, yRadius ?: number, aStartAngle ?: number, aEndAngle ?: number, aClockwise ?: boolean, aRotation ?: number,);,
    lineCurve: constructor(v1 ?: Vector2, v2 ?: Vector2)
    lineCurve3: constructor(v1 ?: Vector3, v2 ?: Vector3)
    quadraticBezierCurve: constructor(v0 ?: Vector2, v1 ?: Vector2, v2 ?: Vector2)
    quadraticBezierCurve3: constructor(v0 ?: Vector3, v1 ?: Vector3, v2 ?: Vector3)
    splineCurve: constructor(points ?: Vector2[])

    // export type InstancedBufferGeometryProps = BufferGeometryNode<THREE.InstancedBufferGeometry, typeof THREE.InstancedBufferGeometry>
    // export type BufferGeometryProps = BufferGeometryNode<THREE.BufferGeometry, typeof THREE.BufferGeometry>
    // export type BoxBufferGeometryProps = BufferGeometryNode<THREE.BoxGeometry, typeof THREE.BoxGeometry>
    // export type CircleBufferGeometryProps = BufferGeometryNode<THREE.CircleGeometry, typeof THREE.CircleGeometry>
    // export type ConeBufferGeometryProps = BufferGeometryNode<THREE.ConeGeometry, typeof THREE.ConeGeometry>
    // export type CylinderBufferGeometryProps = BufferGeometryNode<THREE.CylinderGeometry, typeof THREE.CylinderGeometry>
    // export type DodecahedronBufferGeometryProps = BufferGeometryNode<THREE.DodecahedronGeometry, typeof THREE.DodecahedronGeometry>
    // export type ExtrudeBufferGeometryProps = BufferGeometryNode<THREE.ExtrudeGeometry, typeof THREE.ExtrudeGeometry>
    // export type IcosahedronBufferGeometryProps = BufferGeometryNode<THREE.IcosahedronGeometry, typeof THREE.IcosahedronGeometry>
    // export type LatheBufferGeometryProps = BufferGeometryNode<THREE.LatheGeometry, typeof THREE.LatheGeometry>
    // export type OctahedronBufferGeometryProps = BufferGeometryNode<THREE.OctahedronGeometry, typeof THREE.OctahedronGeometry>
    // export type PlaneBufferGeometryProps = BufferGeometryNode<THREE.PlaneGeometry, typeof THREE.PlaneGeometry>
    // export type PolyhedronBufferGeometryProps = BufferGeometryNode<THREE.PolyhedronGeometry, typeof THREE.PolyhedronGeometry>
    // export type RingBufferGeometryProps = BufferGeometryNode<THREE.RingGeometry, typeof THREE.RingGeometry>
    // export type ShapeBufferGeometryProps = BufferGeometryNode<THREE.ShapeGeometry, typeof THREE.ShapeGeometry>
    // export type SphereBufferGeometryProps = BufferGeometryNode<THREE.SphereGeometry, typeof THREE.SphereGeometry>
    // export type TetrahedronBufferGeometryProps = BufferGeometryNode<THREE.TetrahedronGeometry, typeof THREE.TetrahedronGeometry>
    // export type TorusBufferGeometryProps = BufferGeometryNode<THREE.TorusGeometry, typeof THREE.TorusGeometry>
    // export type TorusKnotBufferGeometryProps = BufferGeometryNode<THREE.TorusKnotGeometry, typeof THREE.TorusKnotGeometry>
    // export type TubeBufferGeometryProps = BufferGeometryNode<THREE.TubeGeometry, typeof THREE.TubeGeometry>
    // export type WireframeGeometryProps = BufferGeometryNode<THREE.WireframeGeometry, typeof THREE.WireframeGeometry>
    // export type TetrahedronGeometryProps = BufferGeometryNode<THREE.TetrahedronGeometry, typeof THREE.TetrahedronGeometry>
    // export type OctahedronGeometryProps = BufferGeometryNode<THREE.OctahedronGeometry, typeof THREE.OctahedronGeometry>
    // export type IcosahedronGeometryProps = BufferGeometryNode<THREE.IcosahedronGeometry, typeof THREE.IcosahedronGeometry>
    // export type DodecahedronGeometryProps = BufferGeometryNode<THREE.DodecahedronGeometry, typeof THREE.DodecahedronGeometry>
    // export type PolyhedronGeometryProps = BufferGeometryNode<THREE.PolyhedronGeometry, typeof THREE.PolyhedronGeometry>
    // export type TubeGeometryProps = BufferGeometryNode<THREE.TubeGeometry, typeof THREE.TubeGeometry>
    // export type TorusKnotGeometryProps = BufferGeometryNode<THREE.TorusKnotGeometry, typeof THREE.TorusKnotGeometry>
    // export type TorusGeometryProps = BufferGeometryNode<THREE.TorusGeometry, typeof THREE.TorusGeometry>
    // export type SphereGeometryProps = BufferGeometryNode<THREE.SphereGeometry, typeof THREE.SphereGeometry>
    // export type RingGeometryProps = BufferGeometryNode<THREE.RingGeometry, typeof THREE.RingGeometry>
    // export type PlaneGeometryProps = BufferGeometryNode<THREE.PlaneGeometry, typeof THREE.PlaneGeometry>
    // export type LatheGeometryProps = BufferGeometryNode<THREE.LatheGeometry, typeof THREE.LatheGeometry>
    // export type ShapeGeometryProps = BufferGeometryNode<THREE.ShapeGeometry, typeof THREE.ShapeGeometry>
    // export type ExtrudeGeometryProps = BufferGeometryNode<THREE.ExtrudeGeometry, typeof THREE.ExtrudeGeometry>
    // export type EdgesGeometryProps = BufferGeometryNode<THREE.EdgesGeometry, typeof THREE.EdgesGeometry>
    // export type ConeGeometryProps = BufferGeometryNode<THREE.ConeGeometry, typeof THREE.ConeGeometry>
    // export type CylinderGeometryProps = BufferGeometryNode<THREE.CylinderGeometry, typeof THREE.CylinderGeometry>
    // export type CircleGeometryProps = BufferGeometryNode<THREE.CircleGeometry, typeof THREE.CircleGeometry>
    // export type BoxGeometryProps = BufferGeometryNode<THREE.BoxGeometry, typeof THREE.BoxGeometry>
    // export type TextGeometryProps = BufferGeometryNode<TextGeometry, typeof TextGeometry>
    // export type CapsuleGeometryProps = BufferGeometryNode<THREE.CapsuleGeometry, typeof THREE.CapsuleGeometry>

    // export type GeometriesProps = BufferGeometryNode<THREE.Geometries, typeof THREE.Geometries>
    boxGeometry: constructor(width ?: number, height ?: number, depth ?: number, widthSegments ?: number, heightSegments ?: number, depthSegments ?: number,)
    capsuleGeometry: constructor(radius ?: number, length ?: number, capSegments ?: number, radialSegments ?: number)
    circleGeometry: constructor(radius ?: number, segments ?: number, thetaStart ?: number, thetaLength ?: number)
    coneGeometry: constructor(radius ?: number, height ?: number, radialSegments ?: number, heightSegments ?: number, openEnded ?: boolean, thetaStart ?: number, thetaLength ?: number,)
    cylinderGeometry: constructor(radiusTop ?: number, radiusBottom ?: number, height ?: number, radialSegments ?: number, heightSegments ?: number, openEnded ?: boolean, thetaStart ?: number, thetaLength ?: number,);,
    dodecahedronGeometry: constructor(radius ?: number, detail ?: number)
    edgesGeometry: constructor(geometry ?: TBufferGeometry | null, thresholdAngle ?: number)
    extrudeGeometry: constructor(shapes ?: Shape | Shape[], options ?: ExtrudeGeometryOptions)
    icosahedronGeometry: constructor(radius ?: number, detail ?: number)
    latheGeometry: constructor(points ?: Vector2[], segments ?: number, phiStart ?: number, phiLength ?: number)
    octahedronGeometry: constructor(radius ?: number, detail ?: number)
    planeGeometry: constructor(width ?: number, height ?: number, widthSegments ?: number, heightSegments ?: number)
    polyhedronGeometry: constructor(vertices ?: number[], indices ?: number[], radius ?: number, detail ?: number)
    ringGeometry: constructor(innerRadius ?: number, outerRadius ?: number, thetaSegments ?: number, phiSegments ?: number, thetaStart ?: number, thetaLength ?: number,);,
    shapeGeometry: constructor(shapes ?: Shape | Shape[], curveSegments ?: number)
    sphereGeometry: constructor(radius ?: number, widthSegments ?: number, heightSegments ?: number, phiStart ?: number, phiLength ?: number, thetaStart ?: number, thetaLength ?: number,)
    tetrahedronGeometry: constructor(radius ?: number, detail ?: number)
    torusGeometry: constructor(radius ?: number, tube ?: number, radialSegments ?: number, tubularSegments ?: number, arc ?: number)
    torusKnotGeometry: constructor(radius ?: number, tube ?: number, tubularSegments ?: number, radialSegments ?: number, p ?: number, q ?: number,);
    tubeGeometry: TubeGeometryProps,
    wireframeGeometry: constructor(path ?: Curve<Vector3>, tubularSegments ?: number, radius ?: number, radialSegments ?: number, closed ?: boolean,);,

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\helpers
    arrowHelper: constructor(dir ?: Vector3, origin ?: Vector3, length ?: number, color ?: ColorRepresentation, headLength ?: number, headWidth ?: number,);,
    axesHelper: constructor(size ?: number)
    box3Helper: constructor(box: Box3, color ?: ColorRepresentation)
    boxHelper: constructor(object: Object3D, color ?: ColorRepresentation)
    cameraHelper: constructor(camera: Camera)
    directionalLightHelper: constructor(light: DirectionalLight, size ?: number, color ?: ColorRepresentation)
    gridHelper: constructor(size ?: number, divisions ?: number, color1 ?: ColorRepresentation, color2 ?: ColorRepresentation)
    hemisphereLightHelper: constructor(light: HemisphereLight, size: number, color ?: ColorRepresentation)
    planeHelper: constructor(plane: Plane, size ?: number, hex ?: number)
    pointLightHelper: constructor(light: PointLight, sphereSize ?: number, color ?: ColorRepresentation)
    polarGridHelper: constructor(radius ?: number, radials ?: number, circles ?: number, divisions ?: number, color1 ?: ColorRepresentation, color2 ?: ColorRepresentation,);,
    skeletonHelper: constructor(object: SkinnedMesh | Object3D)
    spotLightHelper: constructor(light: Light, color ?: ColorRepresentation)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\lights
    AmbientLight: constructor(color ?: ColorRepresentation, intensity ?: number)
    DirectionalLight: constructor(color ?: ColorRepresentation, intensity ?: number)
    DirectionalLightShadow: [],
    HemisphereLight: constructor(skyColor ?: ColorRepresentation, groundColor ?: ColorRepresentation, intensity ?: number)
    Light: constructor(color ?: ColorRepresentation, intensity ?: number)
    LightProbe: constructor(sh ?: SphericalHarmonics3, intensity ?: number)
    LightShadow: constructor(camera: TCamera)
    PointLight: constructor(color ?: ColorRepresentation, intensity ?: number, distance ?: number, decay ?: number)
    PointLightShadow: constructor(camera: TCamera)
    RectAreaLight: constructor(color ?: ColorRepresentation, intensity ?: number, width ?: number, height ?: number)
    SpotLight: constructor(color ?: ColorRepresentation, intensity ?: number, distance ?: number, angle ?: number, penumbra ?: number, decay ?: number,)
    SpotLightShadow: constructor(camera: TCamera)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\loaders
    //no need

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\materials
    lineBasicMaterial: ['parameters'],
    lineDashedMaterial: ['parameters'],
    material: ['parameters'],
    // materials:MaterialsProps,
    meshBasicMaterial: ['parameters'],
    meshDepthMaterial: ['parameters'],
    meshDistanceMaterial: ['parameters'],
    meshLambertMaterial: ['parameters'],
    meshMatcapMaterial: ['parameters'],
    meshNormalMaterial: ['parameters'],
    meshPhongMaterial: ['parameters'],
    meshPhysicalMaterial: ['parameters'],
    meshStandardMaterial: ['parameters'],
    meshToonMaterial: ['parameters'],
    pointsMaterial: ['parameters'],
    rawShaderMaterial: ['parameters'],
    shaderMaterial: ['parameters'],
    shadowMaterial: ['parameters'],
    spriteMaterial: ['parameters'],


    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\math
    box2: constructor(min ?: Vector2, max ?: Vector2)
    box3: constructor(min ?: Vector3, max ?: Vector3)
    color: constructor(color ?: ColorRepresentation, r: number, g: number, b: number)
    colorManagement: [],
    cylindrical: constructor(radius ?: number, theta ?: number, y ?: number)
    euler: constructor(x ?: number, y ?: number, z ?: number, order ?: EulerOrder)
    frustum: constructor(p0 ?: Plane, p1 ?: Plane, p2 ?: Plane, p3 ?: Plane, p4 ?: Plane, p5 ?: Plane)
    interpolant: constructor(parameterPositions: any, sampleValues: any, sampleSize: number, resultBuffer ?: any)
    line3: constructor(start ?: Vector3, end ?: Vector3)
    // mathUtils:MathUtilsProps,
    matrix3: (n11: number, n12: number, n13: number, n21: number, n22: number, n23: number, n31: number, n32: number, n33: number,)
    matrix4: constructor(n11: number, n12: number, n13: number, n14: number, n21: number, n22: number, n23: number, n24: number, n31: number, n32: number, n33: number, n34: number, n41: number, n42: number, n43: number, n44: number,);,
    plane: constructor(normal ?: Vector3, constant ?: number)
    quaternion: constructor(x ?: number, y ?: number, z ?: number, w ?: number)
    ray: constructor(origin ?: Vector3, direction ?: Vector3)
    sphere: constructor(center ?: Vector3, radius ?: number)
    spherical: constructor(radius ?: number, phi ?: number, theta ?: number)
    sphericalHarmonics3: [],
    triangle: constructor(a ?: Vector3, b ?: Vector3, c ?: Vector3)
    vector2: constructor(x ?: number, y ?: number)
    vector3: constructor(x ?: number, y ?: number, z ?: number)
    vector4: constructor(x ?: number, y ?: number, z ?: number, w ?: number)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\math\interpolants
    cubicInterpolant: constructor(parameterPositions: any, samplesValues: any, sampleSize: number, resultBuffer ?: any)
    discreteInterpolant: constructor(parameterPositions: any, samplesValues: any, sampleSize: number, resultBuffer ?: any)
    linearInterpolant: constructor(parameterPositions: any, samplesValues: any, sampleSize: number, resultBuffer ?: any)
    quaternionLinearInterpolant: constructor(parameterPositions: any, samplesValues: any, sampleSize: number, resultBuffer ?: any)


    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\objects
    batchedMesh: constructor(maxGeometryCount: number, maxVertexCount: number, maxIndexCount ?: number, material ?: Material)
    bone: [],
    group: [],
    instancedMesh: constructor(geometry: TGeometry | undefined, material: TMaterial | undefined, count: number)
    //@ts-ignore
    line: constructor(geometry ?: TGeometry, material ?: TMaterial)
    lineLoop: constructor(geometry ?: TGeometry, material ?: TMaterial)
    lineSegments: constructor(geometry ?: TGeometry, material ?: TMaterial)
    lod: [],
    mesh: constructor(geometry ?: TGeometry, material ?: TMaterial)
    points: constructor(geometry ?: TGeometry, material ?: TMaterial)
    skeleton: constructor(bones ?: Bone[], boneInverses ?: Matrix4[])
    skinnedMesh: constructor(geometry ?: TGeometry, material ?: TMaterial, useVertexTexture ?: boolean)
    sprite: constructor(material ?: SpriteMaterial)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\renderers
    webGLCubeRenderTarget: constructor(size ?: number, options ?: RenderTargetOptions)
    webGLRenderer: constructor(parameters ?: WebGLRendererParameters)
    webGLRenderTarget: constructor(width ?: number, height ?: number, options ?: RenderTargetOptions)
    webGL3DRenderTarget: constructor(width ?: number, height ?: number, depth ?: number, options ?: RenderTargetOptions)
    webGLArrayRenderTarget: constructor(width ?: number, height ?: number, depth ?: number, options ?: RenderTargetOptions)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\renderers\shaders
    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\renderers\webgl
    webGLProgram: constructor(renderer: WebGLRenderer, cacheKey: string, parameters: object)
    webGLPrograms: constructor(renderer: WebGLRenderer, cubemaps: WebGLCubeMaps, extensions: WebGLExtensions, capabilities: WebGLCapabilities, bindingStates: WebGLBindingStates, clipping: WebGLClipping,)
    webGLProperties: [],
    webGLRenderLists: constructor(properties: WebGLProperties)
    // webGLShader:WebGLShaderProps,
    webGLShadowMap: constructor(_renderer: WebGLRenderer, _objects: WebGLObjects, _capabilities: WebGLCapabilities)
    webGLState: constructor(gl: WebGLRenderingContext)
    webGLTextures: constructor(gl: WebGLRenderingContext, extensions: WebGLExtensions, state: WebGLState, properties: WebGLProperties, capabilities: WebGLCapabilities, utils: WebGLUtils, info: WebGLInfo,)
    webGLUniforms: constructor(gl: WebGLRenderingContext, program: WebGLProgram)
    // webGLUniformsGroups:WebGLUniformsGroupsProps,
    webGLUtils: constructor(gl: WebGLRenderingContext | WebGL2RenderingContext, extensions: WebGLExtensions,)
    // webGLAttributes:WebGLAttributesProps,
    // webGLBindingStates:WebGLBindingStatesProps,
    webGLBufferRenderer: constructor(gl: WebGLRenderingContext, extensions: WebGLExtensions, info: WebGLInfo,)
    webGLCapabilities: constructor(gl: WebGLRenderingContext, extensions: any, parameters: WebGLCapabilitiesParameters)
    webGLClipping: constructor(properties: WebGLProperties)
    // webGLCubeMaps:WebGLCubeMapsProps,
    webGLCubeUVMaps: constructor(renderer: WebGLRenderer)
    webGLExtensions: constructor(gl: WebGLRenderingContext)
    webGLGeometries: constructor(gl: WebGLRenderingContext, attributes: WebGLAttributes, info: WebGLInfo)
    webGLIndexedBufferRenderer: constructor(gl: WebGLRenderingContext, extensions: any, info: any)
    webGLInfo: constructor(gl: WebGLRenderingContext)
    webGLLights: constructor(extensions: WebGLExtensions)
    webGLObjects: constructor(gl: WebGLRenderingContext, geometries: any, attributes: any, info: any)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\renderers\webxr
    webXRController: [],
    // webXRDepthSensing:WebXRDepthSensingProps,
    webXRManager: constructor(renderer: WebGLRenderer, gl: WebGLRenderingContext)

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\scenes
    fog: constructor(color: ColorRepresentation, near ?: number, far ?: number)
    fogExp2: constructor(color: ColorRepresentation, density ?: number)
    scene: [],

    //node_modules\.pnpm\@types+three@0.164.0\node_modules\@types\three\src\textures
    dataTexture3D: constructor(data ?: BufferSource | null, width ?: number, height ?: number, depth ?: number)
    canvasTexture: constructor(canvas: TexImageSource | OffscreenCanvas, mapping ?: Mapping, wrapS ?: Wrapping, wrapT ?: Wrapping, magFilter ?: MagnificationTextureFilter, minFilter ?: MinificationTextureFilter, format ?: PixelFormat, type ?: TextureDataType, anisotropy ?: number,)
    compressedArrayTexture: constructor(mipmaps: ImageData[], width: number, height: number, depth: number, format: CompressedPixelFormat, type ?: TextureDataType,);,
    compressedCubeTexture: constructor(images: Array<{ width: number; height: number }>, format ?: CompressedPixelFormat, type ?: TextureDataType,);,
    compressedTexture: constructor(mipmaps: ImageData[], width: number, height: number, format: CompressedPixelFormat, type ?: TextureDataType, mapping ?: Mapping, wrapS ?: Wrapping, wrapT ?: Wrapping, magFilter ?: MagnificationTextureFilter, minFilter ?: MinificationTextureFilter, anisotropy ?: number, colorSpace ?: ColorSpace,);,
    cubeTexture: constructor(images ?: any[], mapping ?: CubeTextureMapping, wrapS ?: Wrapping, wrapT ?: Wrapping, magFilter ?: MagnificationTextureFilter, minFilter ?: MinificationTextureFilter, format ?: PixelFormat, type ?: TextureDataType, anisotropy ?: number, colorSpace ?: ColorSpace,);,
    data3DTexture: constructor(data ?: BufferSource | null, width ?: number, height ?: number, depth ?: number)
    dataArrayTexture: constructor(data ?: BufferSource | null, width ?: number, height ?: number, depth ?: number)
    dataTexture: constructor(data ?: BufferSource | null, width ?: number, height ?: number, format ?: PixelFormat, type ?: TextureDataType, mapping ?: Mapping, wrapS ?: Wrapping, wrapT ?: Wrapping, magFilter ?: MagnificationTextureFilter, minFilter ?: MinificationTextureFilter, anisotropy ?: number, colorSpace ?: ColorSpace,)
    depthTexture: constructor(width: number, height: number, type ?: TextureDataType, mapping ?: Mapping, wrapS ?: Wrapping, wrapT ?: Wrapping, magFilter ?: MagnificationTextureFilter, minFilter ?: MinificationTextureFilter, anisotropy ?: number, format ?: DepthTexturePixelFormat,);,
    framebufferTexture: constructor(width: number, height: number)
    //@ts-ignore
    source: constructor(data: any)
    texture: constructor(image ?: TexImageSource | OffscreenCanvas, mapping ?: Mapping, wrapS ?: Wrapping, wrapT ?: Wrapping, magFilter ?: MagnificationTextureFilter, minFilter ?: MinificationTextureFilter, format ?: PixelFormat, type ?: TextureDataType, anisotropy ?: number, colorSpace ?: ColorSpace,)
    // types:typesProps,
    videoTexture: constructor(video: HTMLVideoElement, mapping ?: Mapping, wrapS ?: Wrapping, wrapT ?: Wrapping, magFilter ?: MagnificationTextureFilter, minFilter ?: MinificationTextureFilter, format ?: PixelFormat, type ?: TextureDataType, anisotropy ?: number,)

    //in example
    //node_modules\@types\three\examples\jsm\animation
    ccdikSolver: constructor(mesh: SkinnedMesh, iks ?: IK[])
    mmdAnimationHelper: constructor(params ?: MMDAnimationHelperParameter)
    mmdPhysics: constructor(mesh: SkinnedMesh, rigidBodyParams: object[], constraintParams ?: object[], params ?: MMDPhysicsParameter,)
    // animationClipCreator: AnimationClipCreatorProps,

    //node_modules\@types\three\examples\jsm\cameras
    cinematicCamera: constructor(fov: number, aspect: number, near: number, far: number)

    //node_modules\@types\three\examples\jsm\capabilities
    webGL: [],
    webGPU: [],

    //node_modules\@types\three\examples\jsm\controls
    arcballControls: constructor(camera: Camera, domElement: HTMLElement, scene ?: Scene | null)
    dragControls: constructor(objects: Object3D[], camera: Camera, domElement ?: HTMLElement)
    firstPersonControls: constructor(object: Camera, domElement ?: HTMLElement)
    flyControls: constructor(object: Camera, domElement ?: HTMLElement)
    mapControls: constructor(object: Camera, domElement ?: HTMLElement)
    orbitControls: constructor(object: Camera, domElement: HTMLElement)
    pointerLockControls: constructor(camera: Camera, domElement ?: HTMLElement)
    trackballControls: constructor(object: Camera, domElement ?: HTMLElement)
    transformControls: constructor(object: Camera, domElement ?: HTMLElement)

    //node_modules\@types\three\examples\jsm\csm
    csm: constructor(data: CSMParameters)
    csmFrustum: constructor(data ?: CSMFrustumParameters)
    csmHelper: constructor(csm: TCSM)
    // csmShader: CSMShaderProps,

    //node_modules\@types\three\examples\jsm\curves
    grannyKnot: [],
    heartCurve: constructor(scale ?: number)
    vivianiCurve: constructor(scale ?: number)
    knotCurve: [],
    helixCurve: [],
    trefoilKnot: constructor(scale ?: number)
    torusKnot: constructor(scale ?: number)
    cinquefoilKnot: constructor(scale ?: number)
    trefoilPolynomialKnot: constructor(scale ?: number)
    figureEightPolynomialKnot: FigureEightPolynomialKnotProps,
    decoratedTorusKnot4a: constructor(scale ?: number)
    decoratedTorusKnot4b: constructor(scale ?: number)
    decoratedTorusKnot5a: constructor(scale ?: number)
    decoratedTorusKnot5c: constructor(scale ?: number);,
    nurbsCurve: constructor(degree: number, knots: number[], controlPoints: Vector2[] | Vector3[] | Vector4[], startKnot ?: number, endKnot ?: number,)
    nurbsSurface: constructor(degree1: number, degree2: number, knots1: number[], knots2: number[], controlPoints: Vector2[][] | Vector3[][] | Vector4[][],)
    // nurbsUtils:NURBSUtilsProps,
    nurbsVolume: constructor(degree1: number, degree2: number, degree3: number, knots1: readonly number[], knots2: readonly number[], knots3: readonly number[], controlPoints: Vector4[][][],)

    //node_modules\@types\three\examples\jsm\deprecated
    //Geometry

    //node_modules\@types\three\examples\jsm\effects
    anaglyphEffect: constructor(renderer: WebGLRenderer, width ?: number, height ?: number)
    asciiEffect: constructor(renderer: WebGLRenderer, charSet ?: string, options ?: AsciiEffectOptions)
    outlineEffect: constructor(renderer: WebGLRenderer, parameters ?: OutlineEffectParameters)
    parallaxBarrierEffect: constructor(renderer: WebGLRenderer)
    peppersGhostEffect: constructor(renderer: WebGLRenderer)
    stereoEffect: constructor(renderer: WebGLRenderer)

    //node_modules\@types\three\examples\jsm\environments
    debugEnvironment: [],
    roomEnvironment: constructor(renderer ?: WebGLRenderer)

    //node_modules\@types\three\examples\jsm\exporters
    dracoExporter: [],
    exrExporter: [],
    gltfExporter: [],
    ktx2Exporter: [],
    mmdExporter: [],
    objExporter: [],
    plyExporter: [],
    stlExporter: [],
    usdzExporter: [],

    //node_modules\@types\three\examples\jsm\geometries
    boxLineGeometry: constructor(width ?: number, height ?: number, depth ?: number, widthSegments ?: number, heightSegments ?: number, depthSegments ?: number,)
    convexGeometry: constructor(points ?: Vector3[])
    decalGeometry: constructor(mesh: Mesh, position: Vector3, orientation: Euler, size: Vector3)
    decalVertex: constructor(position: Vector3, normal: Vector3)

    // parametricGeometries:ParametricGeometriesProps,
    parametricGeometries_TubeGeometry: constructor(path: Curve<Vector3>, segments ?: number, radius ?: number, segmentsRadius ?: number, closed ?: boolean,)
    parametricGeometries_TorusKnotGeometry: constructor(radius ?: number, tube ?: number, segmentsT ?: number, segmentsR ?: number, p ?: number, q ?: number)
    parametricGeometries_SphereGeometry: constructor(size: number, u: number, v: number)
    parametricGeometries_PlaneGeometry: constructor(width: number, depth: number, segmentsWidth: number, segmentsDepth: number)
    parametricGeometry: constructor(func ?: (u: number, v: number, target: Vector3) => void, slices ?: number, stacks ?: number)
    roundedBoxGeometry: constructor(width ?: number, height ?: number, depth ?: number, segments ?: number, radius ?: number)
    sDFGeometryGenerator: constructor(renderer: WebGLRenderer)
    teapotGeometry: constructor(size ?: number, segments ?: number, bottom ?: boolean, lid ?: boolean, body ?: boolean, fitLid ?: boolean, blinn ?: boolean,)
    textGeometry: constructor(text: string, parameters ?: TextGeometryParameters)

    //node_modules\@types\three\examples\jsm\helpers
    lightProbeHelper: constructor(lightProbe: LightProbe, size: number)
    octreeHelper: constructor(octree: Octree, color ?: ColorRepresentation)
    positionalAudioHelper: constructor(audio: PositionalAudio, range ?: number, divisionsInnerAngle ?: number, divisionsOuterAngle ?: number)
    rectAreaLightHelper: constructor(light: RectAreaLight, color ?: ColorRepresentation)
    textureHelper: constructor(texture: Texture, width ?: number, height ?: number, depth ?: number)
    vertexNormalsHelper: constructor(object: Object3D, size ?: number, hex ?: number)
    vertexTangentsHelper: constructor(object: Object3D, size ?: number, hex ?: number)
    viewHelper: constructor(camera: Camera, domElement: HTMLElement)

    //node_modules\@types\three\examples\jsm\interactive
    hTMLMesh: constructor(dom: HTMLElement)
    interactiveGroup: [],
    selectionBox: constructor(camera: Camera, scene: Scene, deep ?: number)
    selectionHelper: constructor(renderer: WebGLRenderer, cssClassName: string)

    //node_modules\@types\three\examples\jsm\libs
    //node_modules\@types\three\examples\jsm\lights
    // import {type LightProbeGenerator} from 'three/examples/jsm/lights/LightProbeGenerator'
    // import { type RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib'
    iesSpotLight: constructor(color ?: ColorRepresentation, intensity ?: number, distance ?: number, angle ?: number, penumbra ?: number, decay ?: number,)
    // export type LightProbeGeneratorProps = Node<LightProbeGenerator, typeof LightProbeGenerator>
    // export type RectAreaLightUniformsLibProps = Node<RectAreaLightUniformsLib, typeof RectAreaLightUniformsLib>

    //node_modules\@types\three\examples\jsm\lines
    line2: constructor(geometry ?: LineGeometry, material ?: LineMaterial)
    lineGeometry: [],
    lineMaterial: constructor(parameters ?: LineMaterialParameters)
    lineSegments2: constructor(geometry ?: LineSegmentsGeometry, material ?: LineMaterial)
    lineSegmentsGeometry: [],
    wireframe: constructor(geometry ?: LineSegmentsGeometry, material ?: LineMaterial)
    wireframeGeometry2: constructor(geometry: BufferGeometry)

    //node_modules\@types\three\examples\jsm\loaders
    rhino3dmLoader: ['manager'],
    threeMFLoader: ['manager'],
    amfLoader: ['manager'],
    bvhLoader: ['manager'],
    colladaLoader: ['manager'],
    ddsLoader: ['manager'],
    dracoLoader: ['manager'],
    exrLoader: ['manager'],
    fbxLoader: ['manager'],
    fontLoader: ['manager'],
    gcodeLoader: ['manager'],
    gltfLoader: ['manager'],
    hdrCubeTextureLoader: ['manager'],
    iesLoader: ['manager'],
    kmzLoader: ['manager'],
    ktx2Loader: ['manager'],
    ktxLoader: ['manager'],
    ldrawLoader: ['manager'],
    logLuvLoader: ['manager'],
    lottieLoader: ['manager'],
    lut3dlLoader: ['manager'],
    lutCubeLoader: ['manager'],
    lwoLoader: ['manager'],
    materialXLoader: ['manager'],
    md2Loader: ['manager'],
    mddLoader: ['manager'],
    mmdLoader: ['manager'],
    mtlLoader: ['manager'],
    nrrdLoader: ['manager'],
    objLoader: ['manager'],
    pcdLoader: ['manager'],
    pdbLoader: ['manager'],
    plyLoader: ['manager'],
    pvrLoader: ['manager'],
    rgbeLoader: ['manager'],
    rgbmLoader: ['manager'],
    stlLoader: ['manager'],
    svgLoader: ['manager'],
    tdsLoader: ['manager'],
    tgaLoader: ['manager'],
    tiffLoader: ['manager'],
    tiltLoader: ['manager'],
    ttfLoader: ['manager'],
    usdzLoader: ['manager'],
    voxLoader: ['manager'],
    vrmlLoader: ['manager'],
    vtkLoader: ['manager'],
    xyzLoader: ['manager'],

    //node_modules\@types\three\examples\jsm\materials
    meshGouraudMaterial: constructor(parameters ?: ShaderMaterialParameters)
    meshPostProcessingMaterial: constructor(parameters: MeshPostProcessingMaterialParameters)

    //node_modules\@types\three\examples\jsm\math
    capsule: constructor(start ?: Vector3, end ?: Vector3, radius ?: number)
    // colorConverter:ColorConverterProps,
    convexHull: [],
    improvedNoise: [],
    lut: constructor(colormap ?: string, numberofcolors ?: number)
    meshSurfaceSampler: constructor(mesh: Mesh)
    obb: constructor(center ?: Vector3, halfSize ?: Vector3, rotation ?: Matrix3)
    octree: constructor(box ?: Box3 | null)
    simplexNoise: constructor(r ?: object)

    //node_modules\@types\three\examples\jsm\misc
    convexObjectBreaker: constructor(minSizeForBreak ?: number, smallDelta ?: number)
    gpuComputationRenderer: constructor(sizeX: number, sizeY: number, renderer: WebGLRenderer)
    gyroscope: [],
    md2Character: [],
    md2CharacterComplex: [],
    morphAnimMesh: constructor(geometry: BufferGeometry, material: Material)
    morphBlendMesh: constructor(geometry: BufferGeometry, material: Material)
    progressiveLightMap: constructor(renderer: WebGLRenderer, res ?: number)
    rollerCoasterGeometry: constructor(curve: Curve, divisions: number)
    rollerCoasterLiftersGeometry: constructor(curve: Curve, divisions: number)
    rollerCoasterShadowGeometry: constructor(curve: Curve, divisions: number)
    skyGeometry: [],
    treesGeometry: constructor(landscape: Mesh)
    timer: [],
    tubePainter: [],
    volume: [],
    volumeSlice: constructor(volume: Volume, index ?: number, axis ?: string)

    //node_modules\@types\three\examples\jsm\modifiers
    instancedFlow: constructor(count: number, curveCount: number, geometry: BufferGeometry, material: Material)
    flow: constructor(mesh: Mesh, numberOfCurves ?: number)
    edgeSplitModifier: [],
    simplifyModifier: [],
    tessellateModifier: constructor(maxEdgeLength ?: number, maxIterations ?: number)

    //node_modules\@types\three\examples\jsm\nodes
    // Nodes

    //node_modules\@types\three\examples\jsm\nodes\accessors

    //AccessorsUtilsProps
    batchNode: constructor(batchMesh: BatchedMesh)
bitangentNode: constructor(scope ?: BitangentNodeScope)
bufferNode: constructor(value: ArrayLike<number> | null, bufferType: NodeTypeOption, bufferCount ?: number)
cameraNode: constructor(scope ?: string)
clippingNode: constructor(scope ?: ClippingNodeScope)
    cubeTextureNode: constructor(value: CubeTexture, uvNode ?: Node | null, levelNode ?: Node | null)
    instanceNode: constructor(instanceMesh: InstancedMesh)
    materialNode: constructor(scope ?: MaterialNodeScope)
    materialReferenceNode: constructor(property: string, inputType: string, material ?: Material | null)
    modelNode: constructor(scope ?: string)
    modelViewProjectionNode: constructor(positionNode ?: PositionNode)
    normalNode: constructor(scope ?: NormalNodeScope)
    object3DNode: constructor(scope ?: string, object3d ?: Object3D | null)
    pointUVNode: [],
    positionNode: constructor(scope ?: PositionNodeScope)
    referenceNode: constructor(property: string, uniformType: NodeTypeOption, object ?: T | null, count ?: number | null)
    reflectVectorNode: [],
    rendererReferenceNode: constructor(property: string, inputType: NodeTypeOption, renderer ?: Renderer | null)
    skinningNode: constructor(skinnedMesh: SkinnedMesh, useReference ?: boolean)
    storageBufferNode: constructor(value: ArrayLike<number>, bufferType: NodeTypeOption, bufferCount ?: number)
    tangentNode: constructor(scope ?: TangentNodeScope)
    textureBicubicNode: constructor(textureNode: Node, blurNode ?: Node)
    textureNode: constructor(value: Texture, uvNode ?: ShaderNodeObject<Node>, levelNode ?: ShaderNodeObject<Node> | null)
    uniformsNode: constructor(value: unknown[], elementType ?: string | null)
    userDataNode: constructor(property: string, inputType: NodeTypeOption, userData ?: NodeUserData | null)
    uvNode: constructor(index ?: number)
    vertexColorNode: constructor(index ?: number)

    //node_modules\@types\three\examples\jsm\nodes\code
    codeNode: constructor(code ?: string, includes ?: CodeNodeInclude[], language ?: string)
    expressionNode: constructor(snipped ?: string, nodeType ?: NodeTypeOption)
    functionCallNode: constructor(functionNode ?: FunctionNode<P>, parameters ?: P)
    functionNode: constructor(code ?: string, includes ?: CodeNodeInclude[], language ?: string)

    //node_modules\@types\three\examples\jsm\nodes\core
    assignNode: constructor(targetNode: Node, sourceNode: Node)
    attributeNode: constructor(attributeName: string, nodeType ?: NodeTypeOption | null)
    bypassNode: constructor(returnNode: Node, callNode: Node)
    cacheNode: constructor(node: Node, cache ?: NodeCache)
    // constants:constantsProps,
    constNode: constructor(value: Value, nodeType ?: NodeTypeOption | null)
    contextNode: constructor(node: Node, context: NodeBuilderContext)
    indexNode: constructor(scope: IndexNodeScope)
    inputNode: constructor(value: Value, nodeType ?: NodeTypeOption | null)
    lightingModel: [],
    // node:NodeProps,
    nodeAttribute: constructor(name: string, type: string)
    nodeBuilder: [],
    nodeCache: [],
    nodeCode: constructor(name: string, type: string, code ?: string)
    nodeFrame: [],
    nodeFunction: constructor(type: string, inputs: NodeFunctionInput[], name ?: string, presicion ?: string)
    nodeFunctionInput: constructor(type: string, name: string, count ?: number, qualifier ?: string, isConst ?: boolean)
    nodeKeywords: [],
    nodeParser: [],
    nodeUniform: constructor(name: string, type: string, node: UniformNode<Value>, needsUpdate ?: boolean)
    // nodeUtils:NodeUtilsProps,
    nodeVar: constructor(name: string, type: string)
    nodeVarying: constructor(name: string, type: string)
    outputStructNode: constructor(...members: Node[])
    propertyNode: constructor(nodeType ?: NodeTypeOption | null, name ?: string | null, varying ?: boolean)
    stackNode: [],
    tempNode: constructor(type: NodeTypeOption | null)
    uniformNode: constructor(value: Value, nodeType ?: NodeTypeOption | null)
    varNode: constructor(node: Node, name ?: string | null)
    varyingNode: constructor(node: Node, name ?: string | null)

    //node_modules\@types\three\examples\jsm\nodes\display
    afterImageNode: constructor(textureNode: Node, damp ?: number)
    anamorphicNode: constructor(textureNode: Node, thresholdNode: Node, scaleNode: Node, samples: number)
    blendModeNode: constructor(blendMode: BlendMode, baseNode: Node, blendNode: Node)
    colorAdjustmentNode: constructor(method: ColorAdjustmentMethod, colorNode: Node, adjustmentNode ?: Node)
    colorSpaceNode: constructor(method: ColorSpaceNodeMethod | null, node: Node)
    frontFacingNode: [],
    gaussianBlurNode: constructor(textureNode: TextureNode, sigma ?: number)
    normalMapNode: constructor(node: Node, scaleNode ?: Node | null)
    passNode: constructor(scope: PassNodeScope, scene: Scene, camera: Camera)
    posterizeNode: constructor(sourceNode: Node, stepsNode: Node)
    toneMappingNode: constructor(toneMapping: ToneMapping, exposureNode ?: Node, colorNode ?: Node | null)
    viewportDepthNode: constructor(scope: ViewportDepthNodeScope, valueNode ?: Node | null)
    viewportDepthTextureNode: constructor(uvNode ?: Node, levelNode ?: Node | null)
    viewportNode: constructor(scope: ViewportNodeScope)
    viewportSharedTextureNode: constructor(uvNode ?: Node, levelNode ?: Node | null)
    viewportTextureNode: constructor(uvNode ?: Node, levelNode ?: Node | null, framebufferTexture ?: FramebufferTexture | null)

    //node_modules\@types\three\examples\jsm\nodes\fog
    fogExp2Node: constructor(colorNode: Node, densityNode: Node)
    fogNode: constructor(colorNode: Node | null, factorNode: Node | null)
    fogRangeNode: constructor(colorNode: Node | null, nearNode: Node | null, farNode: Node | null)

    //node_modules\@types\three\examples\jsm\nodes\functions
    phongLightingModel: constructor(specular ?: boolean)
    physicalLightingModel: constructor(clearcoat ?: boolean, sheen ?: boolean, iridescence ?: boolean, anisotropy ?: boolean, transmission ?: boolean,);,
    shadowMaskModel: [],

    //node_modules\@types\three\examples\jsm\nodes\functions\BSDF
    //node_modules\@types\three\examples\jsm\nodes\functions\material
    //node_modules\@types\three\examples\jsm\nodes\geometry
    rangeNode: constructor(min: RangeModeBound, max: RangeModeBound)

    //node_modules\@types\three\examples\jsm\nodes\gpgpu
    computeNode: constructor(computeNode: Node, count: number, workgroupSize ?: number[])

    //node_modules\@types\three\examples\jsm\nodes\lighting
    analyticLightNode: constructor(light ?: T | null)
    aoNode: constructor(aoNode ?: Node | null)
    environmentNode: constructor(envNode ?: Node | null)
    hemisphereLightNode: constructor(light ?: HemisphereLight | null)
    irradianceNode: constructor(node ?: Node | null)
    lightingContextNode: constructor(node: Node, lightingModel ?: LightingModel | null, backdropNode ?: Node | null, backdropAlphaNode ?: Node | null,)
    lightingNode: [],
    lightsNode: constructor(lightNodes ?: LightingNode[])
    // lightUtils:LightUtilsProps,
    pointLightNode: constructor(light ?: PointLight | null)
    spotLightNode: constructor(light ?: SpotLight | null)

    //node_modules\@types\three\examples\jsm\nodes\loaders
    nodeLoader: constructor(manager ?: LoadingManager)
    nodeMaterialLoader: constructor(manager ?: LoadingManager)
    nodeObjectLoader: constructor(manager ?: LoadingManager)

    //node_modules\@types\three\examples\jsm\nodes\materials
    lineBasicNodeMaterialProps: constructor(parameters ?: LineBasicNodeMaterialParameters)
    // materialsProps:MaterialsProps,
    meshBasicNodeMaterialProps: constructor(parameters ?: MeshBasicNodeMaterialParameters)
    meshNormalNodeMaterialProps: constructor(parameters ?: MeshBasicNodeMaterialParameters)
    meshPhongNodeMaterialProps: constructor(parameters ?: MeshPhongNodeMaterialParameters)
    meshPhysicalNodeMaterialProps: constructor(parameters ?: MeshPhysicalNodeMaterialParameters)
    meshSSSNodeMaterialProps: constructor(parameters ?: MeshPhysicalNodeMaterialParameters)
    meshStandardNodeMaterialProps: constructor(paramters ?: MeshStandardNodeMaterialParameters)
    nodeMaterialProps: [],
    pointsNodeMaterialProps: constructor(parameters ?: PointsNodeMaterialParameters)
    shadowNodeMaterialProps: constructor(parameters ?: ShadowNodeMaterialParameters)
    spriteNodeMaterialProps: constructor(parameters ?: SpriteNodeMaterialParameters)

    //node_modules\@types\three\examples\jsm\nodes\materialx
    //node_modules\@types\three\examples\jsm\nodes\materialx\lib
    //node_modules\@types\three\examples\jsm\nodes\math

    condNode: constructor(condNode: Node, ifNode: Node, elseNode: Node)
    hashNode: constructor(seedNode: Node)
    mathNode: constructor(method: MathNodeMethod3, aNode: Node, bNode: Node, cNode: Node)
    // mathUtils:MathUtilsProps,
    operatorNode: constructor(op: OperatorNodeOp, ...params: [Node, Node, ...Node[]])
    // triNoise3D:TriNoise3DProps,

    //node_modules\@types\three\examples\jsm\nodes\pmrem
    pmremNodeProps: constructor(value: Texture, uvNode ?: Node | null, levelNode ?: Node | null)

    //node_modules\@types\three\examples\jsm\nodes\procedural
    checkerNode: constructor(uvNode ?: Node)

    //node_modules\@types\three\examples\jsm\nodes\shadernode

    //node_modules\@types\three\examples\jsm\nodes\utils
    arrayElementNode: constructor(node: Node, indexNode: Node)
    convertNode: constructor(node: Node, convertTo: NodeTypeOption)
    discardNode: constructor(condNode: Node)
    equirectUVNode: constructor(dirNode ?: ShaderNodeObject<PositionNode>)
    joinNode: constructor(nodes: Node[])
    matcapUVNode: [],
    maxMipLevelNode: constructor(textureNode: TextureNode)
    oscNode: constructor(method: OscNodeMethod, timeNode ?: Node)
    reflectorNode: constructor(parameters ?: ReflectorNodeParameters)
    remapNode: constructor(node: Node, inLowNode: Node, inHighNode: Node, outLowNode ?: Node, outHighNode ?: Node)
    rotateNode: constructor(positionNode: Node, rotationNode: Node)
    rotateUVNode: constructor(uvNode: Node, rotationNode: Node, centerNode ?: Node)
    splitNode: constructor(node: Node, components ?: SwizzleOption)
    spriteSheetUVNode: constructor(countNode: Node, uvNode ?: Node, frameNode ?: Node)
    stoargeArrayElementNode: constructor(storageBufferNode: StorageBufferNode, indexNode: Node)
    timerNode: constructor(scope ?: TimerNodeScope, scale ?: number, value ?: number)
    triplanarTexturesNode: constructor(textureXNode: Node, textureYNode ?: TextureNode | null, textureZNode ?: TextureNode | null, scaleNode ?: ShaderNodeObject<Node>, positionNode ?: ShaderNodeObject<PositionNode>, normalNode ?: ShaderNodeObject<PositionNode>,)

    //node_modules\@types\three\examples\jsm\objects
    groundedSkybox: constructor(map: Texture, height: number, radius: number, resolution ?: number)
    lensflare: [],
    marchingCubes: constructor(resolution: number, material: Material, enableUvs ?: boolean, enableColors ?: boolean, maxPolyCount ?: number,)
    quadMesh: constructor(material ?: Material | null)
    reflector: constructor(geometry ?: BufferGeometry, options ?: ReflectorOptions)
    reflectorForSSRPass: constructor(geometry: TGeometry, options: ReflectorForSSRPassOptions)
    refractor: constructor(geometry ?: BufferGeometry, options ?: RefractorOptions)
    shadowMesh: constructor(mesh: Mesh)
    sky: [],
    water: constructor(geometry: BufferGeometry, options: WaterOptions)
    water2: constructor(geometry: BufferGeometry, options: Water2Options)

    //node_modules\@types\three\examples\jsm\physics

    //node_modules\@types\three\examples\jsm\postprocessing
    afterimagePass: constructor(damp ?: number)
    bloomPass: constructor(strength ?: number, kernelSize ?: number, sigma ?: number)
    bokehPass: constructor(scene: Scene, camera: Camera, params: BokehPassParamters)
    clearPass: constructor(clearColor ?: ColorRepresentation, clearAlpha ?: number)
    cubeTexturePass: constructor(camera: PerspectiveCamera, envMap ?: CubeTexture, opacity ?: number)
    dotScreenPass: constructor(center ?: Vector2, angle ?: number, scale ?: number)
    effectComposer: constructor(renderer: WebGLRenderer, renderTarget ?: WebGLRenderTarget)
    filmPass: constructor(intensity ?: number, grayscale ?: boolean)
    glitchPass: constructor(dt_size ?: number)
    gTAOPass: constructor(scene: Scene, camera: Camera, width ?: number | undefined, height ?: number | undefined, parameters ?: { depthTexture?: DepthTexture | undefined; normalTexture?: Texture | undefined } | undefined,)
    halftonePass: constructor(width: number, height: number, params: HalftonePassParameters)
    lutPass: constructor(params: LUTPassParameters)
    maskPass: constructor(scene: Scene, camera: Camera)
    clearMaskPass: [],
    outlinePass: constructor(resolution: Vector2, scene: Scene, camera: Camera, selectedObjects ?: Object3D[])
    outputPass: [],
    pass: [],
    renderPass: constructor(scene: Scene, camera: Camera, overrideMaterial ?: Material | null, clearColor ?: Color | null, clearAlpha ?: number | null,)
    renderPixelatedPass: constructor(pixelSize: number, scene: Scene, camera: Camera, options ?: RenderPixelatedPassParameters)
    renderTransitionPass: constructor(sceneA: Object3D, cameraA: Camera, sceneB: Object3D, cameraB: Camera)
    saoPass: constructor(scene: Scene, camera: Camera, resolution ?: Vector2)
    savePass: constructor(renderTarget ?: WebGLRenderTarget)
    shaderPass: constructor(shader: object, textureID ?: string)
    smaaPass: constructor(width: number, height: number)
    ssaaRenderPass: constructor(scene: Scene, camera: Camera, clearColor ?: ColorRepresentation, clearAlpha ?: number)
    ssaoPass: constructor(scene: Scene, camera: Camera, width ?: number, height ?: number, kernelSize ?: number)
    ssrPass: constructor(params: SSRPassParams)
    taaRenderPass: constructor(scene: Scene, camera: Camera, clearColor ?: ColorRepresentation, clearAlpha ?: number)
    texturePass: constructor(map ?: Texture, opacity ?: number)
    unrealBloomPass: constructor(resolution: Vector2, strength: number, radius: number, threshold: number)

    //node_modules\@types\three\examples\jsm\renderers
    css2DRenderer: constructor(parameters ?: CSS2DParameters)
    css3DRenderer: constructor(parameters ?: CSS3DParameters)
    projector: [],
    svgRenderer: [],

    //node_modules\@types\three\examples\jsm\renderers\common
    Backend: constructor(parameters ?: BackendParameters)
    Color4: constructor(r: number, g: number, b: number, a ?: number)
    Info: InfoProps,
    PostProcessing: constructor(renderer: Renderer, outputNode ?: Node)
    Renderer: constructor(backend: Backend, parameters ?: RendererParameters)
    StorageTexture: constructor(width ?: number, height ?: number)

    //node_modules\@types\three\examples\jsm\renderers\common\extras
    pmremGenerator: constructor(renderer: Renderer)

    //node_modules\@types\three\examples\jsm\renderers\webgl
    webGLBackend: constructor(parameters ?: BackendParameters)

    //node_modules\@types\three\examples\jsm\renderers\webgl\nodes
    slotNode: constructor(params: SlotNodeParameters<TNode>)
    webGLNodeBuilder: constructor(object: Object3D, renderer: Renderer, shader: { uniforms: any; vertexShader: any; fragmentShader: any },)
    // webGLNodes:WebGLNodesProps,

    //node_modules\@types\three\examples\jsm\renderers\webgpu
    webGPUBackend: constructor(parameters ?: WebGPUBackendParameters)
    webGPURenderer: constructor(parameters ?: WebGPURendererParameters)

    //node_modules\@types\three\examples\jsm\shaders
    //node_modules\@types\three\examples\jsm\textures
    flakesTexture: constructor(width ?: number, height ?: number)

    //node_modules\@types\three\examples\jsm\transpiler
    // aST:ASTProps,
    glslDecoder: [],
    shaderToyDecoder: [],
    transpiler: constructor(decoder: { parse(source: string): U }, encoder: { emit(decoded: U): V })
    tslEncoder: [],

    //node_modules\@types\three\examples\jsm\utils
    //node_modules\@types\three\examples\jsm\webxr

    // arButton:ARButtonProps,
    oculusHandModel: constructor(controller: Object3D, loader ?: Loader<GLTF> | null, onLoad ?: ((object: Object3D) => void) | null)
    oculusHandPointerModel: constructor(hand: Object3D, controller: Object3D)
    // text2D:Text2DProps,
    vrButton: [],
    xrButton: [],
    xrControllerModelFactory: constructor(gltfLoader ?: Loader<GLTF> | null, onLoad ?: ((scene: Group) => void) | null)
    xrEstimatedLight: constructor(renderer: WebGLRenderer, environmentEstimation ?: boolean)
    xrHandMeshModel: constructor(handModel: Object3D, controller: Object3D, path: string, handedness: string, loader ?: Loader<GLTF> | null, onLoad ?: ((object: Object3D) => void) | null,)
    xrHandModelFactory: constructor(gltfLoader ?: Loader<GLTF> | null, onLoad ?: ((object: Object3D) => void) | null,);,
    xrHandPrimitiveModel: constructor(handModel: XRHandModel, controller: Group, path: string, handedness: XRHandModelHandedness, options: XRHandPrimitiveModelOptions,)
    xrPlanes: constructor(renderer: WebGLRenderer);

    // primitive
    primitive: []

// lights and other
light: LightProps
spotLightShadow: SpotLightShadowProps
spotLight: SpotLightProps
pointLight: PointLightProps
rectAreaLight: RectAreaLightProps
hemisphereLight: HemisphereLightProps
directionalLightShadow: DirectionalLightShadowProps
directionalLight: DirectionalLightProps
ambientLight: AmbientLightProps
lightShadow: LightShadowProps
// ambientLightProbe: AmbientLightProbeProps
// hemisphereLightProbe: HemisphereLightProbeProps
lightProbe: LightProbeProps

float16BufferAttribute: Float16BufferAttributeProps
float32BufferAttribute: Float32BufferAttributeProps
// float64BufferAttribute: Float64BufferAttributeProps
int8BufferAttribute: Int8BufferAttributeProps
int16BufferAttribute: Int16BufferAttributeProps
int32BufferAttribute: Int32BufferAttributeProps
uint8BufferAttribute: Uint8BufferAttributeProps
uint16BufferAttribute: Uint16BufferAttributeProps
uint32BufferAttribute: Uint32BufferAttributeProps


//animations
booleanKeyframeTrack: ['name', 'times', 'values'],
    colorKeyframeTrack: ['name', 'times', 'values', 'interpolation'],
    numberKeyframeTrack: ['name', 'times', 'values', 'interpolation'],
    quaternionKeyframeTrack: ['name', 'times', 'values', 'interpolation'],
    stringKeyframeTrack: ['name', 'times', 'values', 'interpolation'],
    vectorKeyframeTrack: ['name', 'times', 'values', 'interpolation'],
    animationAction: ['mixer', 'clip', 'localRoot', 'blendMode'],
    animationMixer: ['root'],
    animationObjectGroup: ['...args'],
    animationUtils: [] as any,
    keyframeTrack: ['name', 'times', 'values', 'interpolation'],
    propertyBinding: ['rootNode', 'path', 'parsedPath'],
    propertyMixer: ['binding', 'typeName', 'valueSize'],
    //audio
    audio: ['listener'],
    audioAnalyser: ['audio', 'fftSize'],
    // audioContext: [], //namespace
    audioListener: [] as any,
    positionalAudio: ['listener'],
    //Cameras
    arrayCamera: ['cameras'],
    camera: [] as any,
    cubeCamera: ['near', 'far', 'renderTarget'],
    orthographicCamera: ['left', 'right', 'top', 'bottom', 'near', 'far'],
    perspectiveCamera: ['fov', 'aspect', 'near', 'far'],
    stereoCamera: [] as any,
    //core
    bufferAttribute: ['array', 'itemSize', 'normalized'],
    bufferGeometry: [] as any,
    clock: ['autostart'],
    eventDispatcher: [] as any,
    glBufferAttribute: ['buffer', 'type', 'itemSize', 'elementSize', 'count'],
    // instancedBufferAttribute: ['array', 'itemSize', 'normalized', 'meshPerAttribute' = 1],
    instancedBufferGeometry: [] as any,
    // instancedInterleavedBuffer: ['array', 'stride', 'meshPerAttribute' = 1],
    interleavedBuffer: ['array', 'stride'],
    // interleavedBufferAttribute: ['interleavedBuffer', 'itemSize', 'offset', 'normalized' = false],
    layers: [] as any,
    object3D: [] as any,
    // raycaster: ['origin', 'direction', 'near' = 0, 'far' = Infinity],
    // renderTarget: ['width' = 1, 'height' = 1, 'options' = {}],
    uniform: ['value'],
    uniformsGroup: [] as any,
    //extras
    curve: [] as any,
    curvePath: [] as any,
    // interpolations: [], functions
    path: ['points'],
    shape: ['points'],
    shapePath: [] as any,
    arcCurve: ['aX', 'aY', 'aRadius', 'aStartAngle', 'aEndAngle', 'aClockwise'],
    catmullRomCurve3: ['points', 'closed', 'curveType', 'tension'],
    cubicBezierCurve: ['v0', 'v1', 'v2', 'v3'],
    cubicBezierCurve3: ['v0', 'v1', 'v2', 'v3'],
    // curves: [], IMPORTS
    ellipseCurve: ['aX', 'aY', 'xRadius', 'yRadius', 'aStartAngle', 'aEndAngle', 'aClockwise', 'aRotation'],
    lineCurve: ['v1', 'v2'],
    lineCurve3: ['v1', 'v2'],
    quadraticBezierCurve: ['v0', 'v1', 'v2'],
    quadraticBezierCurve3: ['v0', 'v1', 'v2'],
    splineCurve: ['points'],
    // dataUtils: [], FUNCTIONS
    // earcut: [], FUNCTIONS
    // imageUtils: [], FUNCTIONS
    pMREMGenerator: ['renderer'],
    // shapeUtils: [], FUNCTIONS
    //geometries
    boxGeometry: ['width', 'height', 'depth', 'widthSegments', 'heightSegments', 'depthSegments'],
    capsuleGeometry: ['radius', 'length', 'capSegments', 'radialSegments'],
    circleGeometry: ['radius', 'segments', 'thetaStart', 'thetaLength'],
    coneGeometry: ['radius', 'height', 'radialSegments', 'heightSegments', 'openEnded', 'thetaStart', 'thetaLength'],
    cylinderGeometry: ['radiusTop', 'radiusBottom', 'height', 'radialSegments', 'heightSegments', 'openEnded', 'thetaStart', 'thetaLength'],
    dodecahedronGeometry: ['radius', 'detail'],
    edgesGeometry: ['geometry', 'thresholdAngle'],
    extrudeGeometry: ['shapes', 'options'],
    // geometries: [], IMPORTS
    icosahedronGeometry: ['radius', 'detail'],
    latheGeometry: ['points', 'segments', 'phiStart', 'phiLength'],
    octahedronGeometry: ['radius', 'detail'],
    planeGeometry: ['width', 'height', 'widthSegments', 'heightSegments'],
    polyhedronGeometry: ['vertices', 'indices', 'radius', 'detail'],
    ringGeometry: ['innerRadius', 'outerRadius', 'thetaSegments', 'phiSegments', 'thetaStart', 'thetaLength'],
    shapeGeometry: ['shapes', 'curveSegments'],
    sphereGeometry: ['radius', 'widthSegments', 'heightSegments', 'phiStart', 'phiLength', 'thetaStart', 'thetaLength'],
    tetrahedronGeometry: ['radius', 'detail'],
    torusGeometry: ['radius', 'tube', 'radialSegments', 'tubularSegments', 'arc'],
    torusKnotGeometry: ['radius', 'tube', 'tubularSegments', 'radialSegments', 'p', 'q',],
    tubeGeometry: ['path', 'tubularSegments', 'radius', 'radialSegments', 'closed'],
    wireframeGeometry: ['geometry'],
    //helpers
    arrowHelper: ['dir', 'origin', 'length', 'color', 'headLength', 'headWidth'],
    axesHelper: ['size'],
    box3Helper: ['box', 'color'],
    boxHelper: ['object', 'color'],
    cameraHelper: ['camera'],
    directionalLightHelper: ['light', 'size', 'color'],
    gridHelper: ['size', 'divisions', 'color1', 'color2'],
    hemisphereLightHelper: ['light', 'size', 'color'],
    planeHelper: ['plane', 'size', 'hex'],
    pointLightHelper: ['light', 'sphereSize', 'color'],
    polarGridHelper: ['radius', 'radial', 'circles', 'divisions', 'color1', 'color2'],
    skeletonHelper: ['object'],
    spotLightHelper: ['light', 'color'],
    //light
    ambientLight: ['color', 'intensity'],
    ambientLightProbe: ['color', 'intensity'],
    directionalLight: ['color', 'intensity'],
    directionalLightShadow: [] as any,
    hemisphereLight: ['skyColor', 'groundColor', 'intensity'],
    hemisphereLightProbe: ['skyColor', 'groundColor', 'intensity'],
    light: ['color', 'intensity'],
    lightProbe: ['sh', 'intensity'],
    lightShadow: ['camera'],
    pointLight: ['color', 'intensity', 'distance', 'decay'],
    // pointLightShadow: [], no constructor
    rectAreaLight: ['color', 'intensity', 'width', 'height'],
    spotLight: ['color', 'intensity', 'distance', 'angle', 'penumbra', 'decay'],
    // spotLightShadow: [], no constructor
    //loaders
    animationLoader: ['manager'],
    audioLoader: ['manager'],
    bufferGeometryLoader: ['manager'],
    // cache: [], namespace
    compressedTextureLoader: ['manager'],
    cubeTextureLoader: ['manager'],
    dataTextureLoader: ['manager'],
    fileLoader: ['manager'],
    imageBitmapLoader: ['manager'],
    imageLoader: ['manager'],
    loader: ['manager'],
    // loaderUtils: [], interface
    loadingManager: ['onLoad', 'onProgress', 'onError'],
    materialLoader: ['manager'],
    objectLoader: ['manager'],
    textureLoader: ['manager'],
    //material
    lineBasicMaterial: ['parameters'],
    lineDashedMaterial: ['parameters'],
    material: [] as any,
    // materials: [], imports
    meshBasicMaterial: ['parameters'],
    meshDepthMaterial: ['parameters'],
    meshDistanceMaterial: ['parameters'],
    meshLambertMaterial: ['parameters'],
    meshMatcapMaterial: ['parameters'],
    meshNormalMaterial: ['parameters'],
    meshPhongMaterial: ['parameters'],
    meshPhysicalMaterial: ['parameters'],
    meshStandardMaterial: ['parameters'],
    meshToonMaterial: ['parameters'],
    pointsMaterial: ['parameters'],
    rawShaderMaterial: ['parameters'],
    shaderMaterial: ['parameters'],
    shadowMaterial: ['parameters'],
    spriteMaterial: ['parameters'],
    //math
    cubicInterpolant: ['parameterPositions', 'samplesValues', 'sampleSize', 'resultBuffer'],
    discreteInterpolant: ['parameterPositions', 'samplesValues', 'sampleSize', 'resultBuffer'],
    linearInterpolant: ['parameterPositions', 'samplesValues', 'sampleSize', 'resultBuffer'],
    quaternionLinearInterpolant: ['parameterPositions', 'samplesValues', 'sampleSize', 'resultBuffer'],
    box2: ['min', 'max'],
    box3: ['min', 'max'],
    color: [['color'], ['r', 'g', 'b']],
    // colorManagement: [], //namespace
    cylindrical: ['radius', 'theta', 'y'],
    euler: ['x', 'y', 'z', 'order'],
    frustum: ['p0', 'p1', 'p2', 'p3', 'p4', 'p5'],
    interpolant: ['parameterPositions', 'samplesValues', 'sampleSize', 'resultBuffer'],
    line3: ['start', 'end'],
    // mathUtils: [], //functions
    matrix3: [] as any,
    matrix4: [] as any,
    plane: ['normal', 'constant'],
    quaternion: ['x', 'y', 'z', 'w'],
    ray: ['origin', 'direction'],
    sphere: ['center', 'radius'],
    spherical: ['radius', 'phi', 'theta'],
    sphericalHarmonics3: [] as any,
    triangle: ['a', 'b', 'c'],
    vector2: ['x', 'y'],
    vector3: ['x', 'y', 'z'],
    vector4: ['x', 'y', 'z', 'w'],
    //objects
    bone: [] as any,
    group: [] as any,
    instancedMesh: ['geometry', 'material', 'count'],
    line: ['geometry', 'material'],
    lineLoop: ['geometry', 'material'],
    lineSegments: ['geometry', 'material'],
    LOD: [] as any,
    mesh: ['geometry', 'material'],
    points: ['geometry', 'material'],
    skeleton: ['bones', 'boneInverses'],
    skinnedMesh: ['geometry', 'material', 'useVertexTexture'],
    sprite: ['material'],
    //renderers
    // shaderChunk:,
    // shaderLib:,
    // uniformsLib:,
    // uniformsUtils:,
    //webgl
    webGLAttributes: ['gl', 'capabilities'],
    webGLBindingStates: ['gl', 'extensions', 'attributes', 'capabilities'],
    webGLBufferRenderer: ['gl', 'extensions', 'info', 'capabilities'],
    webGLCapabilities: ['gl', 'extensions', 'parameters'],
    webGLClipping: ['properties'],
    webGlCubeMaps: ['renderer'],
    webGLCubeUVMaps: ['renderer'],
    webGLExtensions: ['gl'],
    webGLGeometries: ['gl', 'attributes', 'info'],
    webGLIndexedBufferRenderer: ['gl', 'extensions', 'info', 'capabilities'],
    webGLInfo: ['gl'],
    webGLLights: ['extensions', 'capabilities'],
    webGLObjects: ['gl', 'geometries', 'attributes', 'info'],
    webGLPrograms: ['renderer', 'cacheKey', 'parameters'],
    webGlProperties: [] as any,
    webGLRenderLists: ['properties'],
    // webGLShaders:[],function
    webGlShadowMap: ['_renderer', '_objects', '_capabilities'],
    webGLState: [] as any,
    webGLTextures: ['gl', 'extensions', 'state', 'properties', 'capabilities', 'utils', 'info'],
    webGLUniforms: ['gl', 'program'],
    // webGLUniformsGroups: [], functions
    webGLUtils: ['gl', 'extensions', 'capabilities'],
    webXRController: [] as any,
    webXRManager: ['renderer', 'gl'],
    webGL1Renderer: ['parameters'],
    webGL3DRenderTarget: ['width', 'height', 'depth'],
    webGLArrayRenderTarget: ['width', 'height', 'depth'],
    webGLCubeRenderTarget: ['size', 'options'],
    webGLMultipleRenderTarget: ['width', 'height', 'count', 'options'],
    webGLRenderer: ['parameters'],
    webGLRenderTarget: ['width', 'height', 'options'],
    //scenes
    fog: ['color', 'near', 'far'],
    fogExp2: ['color', 'density'],
    scene: [] as any,
    //textures
    canvasTexture: ['canvas', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy'],
    compressedArrayTexture: ['mipmaps', 'width', 'height', 'depth', 'format', 'type'],
    compressedTexture: ['mipmaps', 'width', 'height', 'format', 'type', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'anisotropy', 'colorSpace'],
    cubeTexture: ['images', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy', 'colorSpace'],
    data3DTexture: ['data', 'width', 'height', 'depth'],
    dataArrayTexture: ['data', 'width', 'height', 'depth'],
    dataTexture: ['data', 'width', 'height', 'format', 'type', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'anisotropy', 'colorSpace'],
    depthTexture: ['width', 'height', 'type', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'anisotropy', 'format'],
    framebufferTexture: ['width', 'height'],
    source: ['data'],
    texture: ['image', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy', 'colorSpace'],
    // types:[],
    videoTexture: ['video', 'mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'format', 'type', 'anisotropy'],

}