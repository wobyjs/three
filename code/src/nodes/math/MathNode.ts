import { Node as ENode } from 'three/src/nodes/Nodes.js'
import { Node } from '../../../three-types'
import MathNode, { MathNodeMethod3 } from 'three/src/nodes/math/MathNode.js'
export { MathNode }
import { Three } from '../../../lib/3/three'
import { consParams } from '../../../lib/3/consParams'
import { objProps } from '../../../lib/3/objProps'
import { defaults } from '../../../lib/3/defaults'

declare module '../../../lib/3/three'
{
    interface Three {
        MathNode: typeof MathNode
    }
}

Three.MathNode = MathNode

declare module 'woby' {
    namespace JSX {
        interface IntrinsicElements {
            mathNode: MathNodeProps,
        }
    }
}

declare module '../../../lib/3/consParams' {
    interface consParams {
        mathNode: typeof mathNode
        nodeElements: typeof nodeElements
    }
}

declare module '../../../lib/3/objProps' {
    interface objProps {
        mathNode: typeof _mathNode
        nodeElements: typeof _nodeElements
    }
}



const mathNode = ([
    'method',
    'aNode',
    'bNode',
    'cNode',
] as const).distinct()
consParams.mathNode = mathNode


const nodeElements = ([
    'all',
    'any',
    'equals',
    'radians',
    'degrees',
    'exp',
    'exp2',
    'log',
    'log2',
    'sqrt',
    'inverseSqrt',
    'floor',
    'ceil',
    'normalize',
    'fract',
    'sin',
    'cos',
    'tan',
    'asin',
    'acos',
    'atan',
    'abs',
    'sign',
    'length',
    'lengthSq',
    'negate',
    'oneMinus',
    'dFdx',
    'dFdy',
    'round',
    'reciprocal',
    'trunc',
    'fwidth',
    'atan2',
    'min',
    'max',
    'mod',
    'step',
    'reflect',
    'distance',
    'dot',
    'cross',
    'pow',
    'pow2',
    'pow3',
    'pow4',
    'transformDirection',
    'mix',
    'clamp',
    'refract',
    'smoothstep',
    'faceForward',
    'difference',
    'saturate',
    'cbrt',

    'lightingContext',
    'cond',
    'hash',
    'parabola',
    'gain',
    'pcurve',
    'sinc',
    'compute',
    'rangeFog',
    'fog',
    'densityFog',
    'viewportSharedTexture',
    'viewportTexture',
    'viewportMipTexture',
    'toneMapping',
    'gaussianBlur',
    'normalMap',
    'posterize',
    'add',
    'sub',
    'mul',
    'div',
    'remainder',
    'equal',
    'lessThan',
    'greaterThan',
    'lessThanEqual',
    'greaterThanEqual',
    'and',
    'or',
    'not',
    'xor',
    'bitAnd',
    'bitNot',
    'bitOr',
    'bitXor',
    'shiftLeft',
    'shiftRight',
    'afterImage',
    'anamorphic',
    'burn',
    'dodge',
    'overlay',
    'screen',
    'saturation',
    'vibrance',
    'hue',
    'threshold',
    'linearTosRGB',
    'sRGBToLinear',
    'linearToColorSpace',
    'colorSpaceToLinear',
    'temp',
    'toVar',
    'context',
    'label',
    'varying',
    'bypass',
    'cache',
    'globalCache',
    'call',
    'assign',
    'bicubic',
    'storageElement',
    'triplanarTexture',
    'cubeTexture',
    'texture',
    'rotateUV',
    'remap',
    'remapClamp',
    'rotate',
    'append',
    'color',
    'float',
    'int',
    'uint',
    'bool',
    'vec2',
    'ivec2',
    'uvec2',
    'bvec2',
    'vec3',
    'ivec3',
    'uvec3',
    'bvec3',
    'vec4',
    'ivec4',
    'uvec4',
    'bvec4',
    'mat2',
    'imat2',
    'umat2',
    'bmat2',
    'mat3',
    'imat3',
    'umat3',
    'bmat3',
    'mat4',
    'imat4',
    'umat4',
    'bmat4',
    'string',
    'arrayBuffer',
    'element',
    'convert',
    'checker',
    'discard',
] as const).distinct()
consParams.nodeElements = nodeElements



const _mathNode = ([...objProps.tempNode,
    // 1 input
    // 2 inputs
    // 3 inputs
    'method',
    'aNode',
    'bNode',
    'cNode',
] as const).distinct()
objProps.mathNode = _mathNode


const _nodeElements = ([
    'all',
    'any',
    'equals',
    'radians',
    'degrees',
    'exp',
    'exp2',
    'log',
    'log2',
    'sqrt',
    'inverseSqrt',
    'floor',
    'ceil',
    'normalize',
    'fract',
    'sin',
    'cos',
    'tan',
    'asin',
    'acos',
    'atan',
    'abs',
    'sign',
    'length',
    'lengthSq',
    'negate',
    'oneMinus',
    'dFdx',
    'dFdy',
    'round',
    'reciprocal',
    'trunc',
    'fwidth',
    'atan2',
    'min',
    'max',
    'mod',
    'step',
    'reflect',
    'distance',
    'dot',
    'cross',
    'pow',
    'pow2',
    'pow3',
    'pow4',
    'transformDirection',
    'mix',
    'clamp',
    'refract',
    'smoothstep',
    'faceForward',
    'difference',
    'saturate',
    'cbrt',

    'lightingContext',
    'cond',
    'hash',
    'parabola',
    'gain',
    'pcurve',
    'sinc',
    'compute',
    'rangeFog',
    'fog',
    'densityFog',
    'viewportSharedTexture',
    'viewportTexture',
    'viewportMipTexture',
    'toneMapping',
    'gaussianBlur',
    'normalMap',
    'posterize',
    'add',
    'sub',
    'mul',
    'div',
    'remainder',
    'equal',
    'lessThan',
    'greaterThan',
    'lessThanEqual',
    'greaterThanEqual',
    'and',
    'or',
    'not',
    'xor',
    'bitAnd',
    'bitNot',
    'bitOr',
    'bitXor',
    'shiftLeft',
    'shiftRight',
    'afterImage',
    'anamorphic',
    'burn',
    'dodge',
    'overlay',
    'screen',
    'saturation',
    'vibrance',
    'hue',
    'threshold',
    'linearTosRGB',
    'sRGBToLinear',
    'linearToColorSpace',
    'colorSpaceToLinear',
    'temp',
    'toVar',
    'context',
    'label',
    'varying',
    'bypass',
    'cache',
    'globalCache',
    'call',
    'assign',
    'bicubic',
    'storageElement',
    'triplanarTexture',
    'cubeTexture',
    'texture',
    'rotateUv',
    'remap',
    'remapClamp',
    'rotate',
    'append',
    'color',
    'float',
    'int',
    'uint',
    'bool',
    'vec2',
    'ivec2',
    'uvec2',
    'bvec2',
    'vec3',
    'ivec3',
    'uvec3',
    'bvec3',
    'vec4',
    'ivec4',
    'uvec4',
    'bvec4',
    'mat2',
    'imat2',
    'umat2',
    'bmat2',
    'mat3',
    'imat3',
    'umat3',
    'bmat3',
    'mat4',
    'imat4',
    'umat4',
    'bmat4',
    'string',
    'arrayBuffer',
    'element',
    'convert',
    'checker',
    'discard',
] as const).distinct()
objProps.nodeElements = _nodeElements

export type MathNodeProps = Node<MathNode, typeof MathNode, { method: MathNodeMethod3; aNode?: ENode; bNode?: ENode; cNode?: ENode; }>

declare module '../../../lib/3/defaults' {
    interface defaults {
        mathNode: Partial<{ method: MathNodeMethod3; aNode?: ENode; bNode?: ENode; cNode?: ENode; }>
    }
}

defaults.mathNode = {}

